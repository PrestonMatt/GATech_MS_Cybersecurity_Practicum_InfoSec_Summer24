Flying simulator to demonstrate kinetic effects on the airplane:
Start flight simulation software that should interface with LRU outputs. It should at this point just be an outline of the following functionality: 

    A tick/step-based time system that calculates the airplanes positional data from the last tick. Given the following attributes: altitude, x/y position, roll, yaw, pitch, forward velocity, and jet engine thrust, it should calculate the next x, y, altitude positional data. 

    Start at position 0, 0, 500 

    Plot continuously the planâ€™s positional data  

    A way to take in data from the actuators LRUs (jet engines, balancing LRUs for fins, etc) and translate that to the calculations. 

An outline here consists of creating the python file, putting in the math equations for steps/ticks for this, outlining a function that should take in data from an actuator and setting up the plotting given 3-d coordinates. 

This will be the codebase to test the ARINC429 simulation actuators from. 

ARINC 429 bus:
LRU for flight management computer
LRU for radio (RX)
LRU for GPS (TX)
LRU for ADIRU (TX)
LRU for engine 1 (RX)
LRU for engine 2 (RX)
LRU for balance system (RX)
Orange bus
Blue bus
Green bus (channel a)
purple bus (channel b)

Generate attack for arinc bus:
make simple vulnerable C program that is IP accessible from the flight management computer
create an exploit that gets system access for FMC and starts to generate and send ARINC 429 words that crash the plane
Demonstrate this effect while hooked up to the flight simulator

IDS:
logging feature
rule implimentation listening feature
-> log alarms based on transmission ID
-> log alarms based on parity, and if parity is correct
-> log alarms based on sign/statis matrix 
	-> normal operation (and then also if it indicates N/S, E/W orientation)
	-> functional test
	-> failure warning
	-> no computed data
-> log alarms based on data
	-> plane direction
	-> combine with previous frames to see for kinetic failure
-> log alarms based on Source/Dest feild
-> log alarms based on Label (data type)
-> create a mode that can reset the bus upon any of these alarms
-> create a mode that can learn normal traffic (ML approach) and reset bus comms based on bad traffic

